% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query-result.R
\name{EsgfQueryResult}
\alias{EsgfQueryResult}
\title{Base class for results for ESGF query}
\description{
\code{EsgfQueryResult} is a base class that represents basic query results from
ESGF search RESTful API. It defines common fields and methods for results
from all query types, including \code{Dataset}, \code{File} and \code{Aggregation}. Results
from the three types are

In general, there is no need to create an \code{EsgfQueryResult} manually.
}
\author{
Hongyuan Jia
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{id}}{A character vector indicating globally unique record
identifiers.}

\item{\code{url}}{A list of \link[data.table:data.table]{data.table} with 3
columns:
\enumerate{
\item \code{service} \[\code{character}\]: The service types, e.g. OPENDAP,
HTTPServer, etc.;
\item \code{url} \[\code{character}\]: The actual URLs;
\item \code{mime_type} \[\code{character}\]: The MIME types indicating
the nature and format of the corresponding document of the
URLs.
}}

\item{\code{size}}{A vector of \link[units:units]{units} indicating the
file sizes.}

\item{\code{fields}}{A character vector indicating all fields in the results.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-EsgfQueryResult-new}{\code{EsgfQueryResult$new()}}
\item \href{#method-EsgfQueryResult-to_dt}{\code{EsgfQueryResult$to_dt()}}
\item \href{#method-EsgfQueryResult-count}{\code{EsgfQueryResult$count()}}
\item \href{#method-EsgfQueryResult-save}{\code{EsgfQueryResult$save()}}
\item \href{#method-EsgfQueryResult-load}{\code{EsgfQueryResult$load()}}
\item \href{#method-EsgfQueryResult-clone}{\code{EsgfQueryResult$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EsgfQueryResult-new"></a>}}
\if{latex}{\out{\hypertarget{method-EsgfQueryResult-new}{}}}
\subsection{Method \code{new()}}{
Create a new EsgfQueryResult object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EsgfQueryResult$new(host, params, response)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{host}}{The URL to the ESGF Search API service. This should be
the URL of the ESGF search service excluding the final
endpoint name. It should be the same as the \code{host} for an
\link{EsgfQuery} object that collects the query results.}

\item{\code{params}}{A list of query parameters.}

\item{\code{response}}{The result of an query response.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An \code{EsgfQueryResult} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EsgfQueryResult-to_dt"></a>}}
\if{latex}{\out{\hypertarget{method-EsgfQueryResult-to_dt}{}}}
\subsection{Method \code{to_dt()}}{
Convert the results into a \link[data.table:data.table]{data.table}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EsgfQueryResult$to_dt(fields = NULL, formatted = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fields}}{A character vector indicating the fields to put into
the \code{data.table}. If \code{NULL}, all fields in the query result
will be used. Possible field names can be retrieved using
\verb{$fields}. Default: \code{NULL}.}

\item{\code{formatted}}{Whether to use formatted values for special fields,
including \code{url} and \code{size}. Default: \code{FALSE}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \link[data.table:data.table]{data.table}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EsgfQueryResult-count"></a>}}
\if{latex}{\out{\hypertarget{method-EsgfQueryResult-count}{}}}
\subsection{Method \code{count()}}{
Count the number of matched records in current result
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EsgfQueryResult$count()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
An integer.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EsgfQueryResult-save"></a>}}
\if{latex}{\out{\hypertarget{method-EsgfQueryResult-save}{}}}
\subsection{Method \code{save()}}{
Save the result into a JSON file

\verb{$save()} puts main data of an \code{EsgfQueryResult} object into a JSON file
which can be loaded to restore the current state of result using
\href{#method-EsgfQueryResult-load}{\code{EsgfQueryResult$load()}}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EsgfQueryResult$save(file = "result.json", pretty = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{A string indicating the JSON file path to save the data
to. Default: \code{result.json}.}

\item{\code{pretty}}{Whether to add indentation whitespace to JSON output.
For details, please see \code{\link[jsonlite:fromJSON]{jsonlite::toJSON()}}. Default: \code{TRUE}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The full path of the output JSON file.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EsgfQueryResult-load"></a>}}
\if{latex}{\out{\hypertarget{method-EsgfQueryResult-load}{}}}
\subsection{Method \code{load()}}{
Restore the result state from an JSON file

\verb{$load()} reads data of an \code{EsgfQueryResult} object from a JSON file
created using
\href{#method-EsgfQueryResult-save}{\code{EsgfQueryResult$save()}}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EsgfQueryResult$load(file = "result.json")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file}}{A string indicating the JSON file path to read the data
from. Default: \code{result.json}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The modified \code{EsgfQueryResult} object itself.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-EsgfQueryResult-clone"></a>}}
\if{latex}{\out{\hypertarget{method-EsgfQueryResult-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EsgfQueryResult$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
